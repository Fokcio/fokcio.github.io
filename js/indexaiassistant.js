// === ANIMACJA PALCA ===
function animateFingerClick(targetId) {
  const target = document.getElementById(targetId);
  if (!target) {
    console.warn("Nie znaleziono elementu:", targetId);
    return;
  }

  const finger = document.createElement('div');
  finger.textContent = 'üëÜ';
  finger.style.position = 'fixed';
  finger.style.zIndex = '9999';
  finger.style.fontSize = '32px';
  finger.style.left = 'calc(100% - 60px)';
  finger.style.top = 'calc(100% - 60px)';
  finger.style.pointerEvents = 'none';
  document.body.appendChild(finger);

  const startX = window.innerWidth - 40;
  const startY = window.innerHeight - 40;

  const rect = target.getBoundingClientRect();
  const endX = rect.left + rect.width / 2;
  const endY = rect.top + rect.height / 2;

  const duration = 1000;
  const startTime = performance.now();

  function easeInOut(t) {
    return t < 0.5 ? 2*t*t : -1 + (4 - 2*t)*t;
  }

  function animate(time) {
    const elapsed = time - startTime;
    let t = Math.min(elapsed / duration, 1);
    const progress = easeInOut(t);

    const x = startX + (endX - startX) * progress;
    const y = startY + (endY - startY) * progress - Math.sin(progress * Math.PI) * 100;

    finger.style.left = `${x}px`;
    finger.style.top = `${y}px`;

    if (t < 1) {
      requestAnimationFrame(animate);
    } else {
      target.click();
      finger.style.transition = 'opacity 0.3s';
      finger.style.opacity = '0';
      setTimeout(() => finger.remove(), 300);
    }
  }

  requestAnimationFrame(animate);
}

// === ELEMENTY ===
const bioBtn = document.getElementById('biobtn');
const filmikiBtn = document.getElementById('filmikibtn');
const aiBtn = document.getElementById('aibtn');
const chatToggle = document.getElementById('chatToggle');
const chatWindow = document.getElementById('chatWindow');
const chatClose = document.getElementById('chatClose');
const chatMessages = document.getElementById('chatMessages');
const chatInput = document.getElementById('chatInput');
const sendBtn = document.getElementById('sendBtn');

let highlightTimeout;

// === POD≈öWIETLANIE ===
function highlightAiBtn() {
  aiBtn.classList.add('highlight');
  clearTimeout(highlightTimeout);
  highlightTimeout = setTimeout(() => {
    aiBtn.classList.remove('highlight');
  }, 3000);
}

function highlightFilmikiBtn() {
  filmikiBtn.classList.add('highlight');
  clearTimeout(highlightTimeout);
  highlightTimeout = setTimeout(() => {
    filmikiBtn.classList.remove('highlight');
  }, 3000);
}

function highlightBioBtn() {
  bioBtn.classList.add('highlight');
  clearTimeout(highlightTimeout);
  highlightTimeout = setTimeout(() => {
    bioBtn.classList.remove('highlight');
  }, 3000);
}

// === MOWA ===
function speakText(text) {
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = navigator.language || 'en-US';
  utterance.rate = 1;
  utterance.pitch = 1;
  speechSynthesis.speak(utterance);
}

// === WIADOMO≈öCI ===
function appendMessage(text, fromUser = false) {
  const div = document.createElement('div');
  div.classList.add('message');
  div.classList.add(fromUser ? 'userMsg' : 'aiMsg');

  // Obs≈Çuga wielu <tts> w jednej wiadomo≈õci
  const ttsRegex = /<tts>(.*?)<!tts>/gs;
  let visibleText = text;
  let match;

  while ((match = ttsRegex.exec(text)) !== null) {
    const spokenText = match[1].trim();
    speakText(spokenText);
  }

  // Usu≈Ñ tagi z widocznego tekstu
  visibleText = visibleText.replace(ttsRegex, (_, spoken) => spoken);

  div.textContent = visibleText;
  chatMessages.appendChild(div);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

function extractJsonFromText(text) {
  const jsonStart = text.lastIndexOf('{');
  if (jsonStart === -1) return null;
  try {
    const jsonString = text.substring(jsonStart);
    const obj = JSON.parse(jsonString);
    return obj;
  } catch {
    return null;
  }
}

// === SYSTEM PROMPT ===
const systemPrompt = `
Jeste≈õ pomocnym asystentem AI na stronie internetowej u≈ºytkownika Fokcio, strona nazywa sie fokcio.github.io.
Odpowiadasz w jƒôzyku takim w jakim u≈ºytkownik do ciebie pisze (np. kto≈õ pisze do ciebie po angielsku to pisz po angielsku, ale json dalej po polsku, jak po francusku to tak samo)

- Je≈õli u≈ºytkownik chce **otworzyƒá bio** (np. komendy typu: "otw√≥rz bio", "poka≈º bio", "bio"), odpowiedz naturalnie ≈ºe otwierasz bio i na ko≈Ñcu dodaj w osobnej linii:

{"akcja": "pokaz_bio"}

- Je≈õli u≈ºytkownik pyta **gdzie jest bio** lub o **lokalizacjƒô bio** lub o **przycisk bio** (np. "gdzie jest bio?", "lokalizacja bio", "gdzie znale≈∫ƒá bio", "jak otworzyƒá bio"), odpowiedz naturalnie, powiedz mu ≈ºe przycisk zosta≈Ç pod≈õwietlony i na ko≈Ñcu dodaj:

{"akcja": "podswietl_bio"}

- Je≈õli u≈ºytkownik chce **otworzyƒá filmiki** (np. komendy typu: "otw√≥rz filmiki", "poka≈º filmiki", "filmiki"), odpowiedz naturalnie ≈ºe otwierasz filmiki i na ko≈Ñcu dodaj w osobnej linii:

{"akcja": "pokaz_filmiki"}

- Je≈õli u≈ºytkownik pyta **gdzie sƒÖ filmiki** lub o **lokalizacjƒô filmik√≥w** lub o **przycisk filmiki** (np. "gdzie sƒÖ filmiki?", "lokalizacja przycisku filmiki", "gdzie znale≈∫ƒá filmiki", "jak otworzyƒá filmiki"), odpowiedz naturalnie, powiedz mu ≈ºe przycisk zosta≈Ç pod≈õwietlony i na ko≈Ñcu dodaj:

{"akcja": "podswietl_filmiki"}

- Je≈õli u≈ºytkownik chce **otworzyƒá Ai** (np. komendy typu: "otw√≥rz Ai", "poka≈º Ai", "Ai"), odpowiedz naturalnie ≈ºe otwierasz Ai i na ko≈Ñcu dodaj w osobnej linii:

{"akcja": "pokaz_Ai"}

- Je≈õli u≈ºytkownik pyta **gdzie jest Ai** lub o **lokalizacjƒô Ai** lub o **przycisk Ai** (np. "gdzie jest Ai?", "lokalizacja przycisku Ai", "gdzie znale≈∫ƒá Ai", "jak otworzyƒá Ai"), odpowiedz naturalnie, powiedz mu ≈ºe przycisk zosta≈Ç pod≈õwietlony i na ko≈Ñcu dodaj:

{"akcja": "podswietl_Ai"}


- Je≈õli u≈ºytkownik chce **uzyskaƒá pomoc** (np. komendy typu: "pomoc", "co potrafisz", "po co jeste≈õ", "co mo≈ºesz wykonaƒá"), odpowiedz naturalnie co umiesz (rzeczy powy≈ºej)

- Je≈õli nie ma potrzeby ≈ºadnej akcji, nie dodawaj JSON-a.

- Nie u≈ºywaj s≈Ç√≥w kluczowych takich jak [OPEN_BIO] lub [HIGHLIGHT_BIO] w odpowiedzi.

- Nie wykonuj ≈ºadnych nielegalnych dzia≈Ça≈Ñ.

---

Pamiƒôtaj, by dok≈Çadnie rozr√≥≈ºniaƒá **otwieranie** i **pod≈õwietlanie przycisku**.

- Mo≈ºesz m√≥wiƒá do u≈ºytkownika u≈ºywajƒÖc tag√≥w <tts> i <!tts>,
- Je≈õli u≈ºytkownik poprosi ciƒô o powiedzenie czego≈õ, mo≈ºesz odpowiedzieƒá np. "Jasne, <tts>wiedzia≈Çe≈õ ≈ºe umiem m√≥wiƒá?<!tts>"
- Mo≈ºesz te≈º czasami zaskoczyƒá u≈ºytkownika m√≥wiƒÖc co≈õ niespodziewanego lub strasznego, ale tylko w ≈ºartobliwy spos√≥b oraz maksymalnie 5 s≈Ç√≥w.
- U≈ºytkownik jak powie aby≈õ zawsze m√≥wi≈Ç to zawsze na poczƒÖtku i na ko≈Ñcu wiadomo≈õci pisz <tts> i <!tts>, ale jak powie aby≈õ przesta≈Ç to przesta≈Ñ
- Jak spyta u≈ºytkownik co umiesz to masz prawo mu powiedzieƒá ≈ºe umiesz m√≥wiƒá i ≈ºe mo≈ºe poprosiƒá ciebie lub poprosiƒá aby≈õ nie m√≥wi≈Ç
`;

let chatHistory = [
  { role: "system", content: systemPrompt.trim() }
];

// === API DO PUTER ===
async function sendToPuter(userMessage) {
  chatHistory.push({ role: "user", content: userMessage });

  try {
    const result = await puter.ai.chat(chatHistory, {
      model: "gpt-4.1-mini"
    });

    const assistantReply = result.message?.content || "Brak odpowiedzi AI";
    chatHistory.push({ role: "assistant", content: assistantReply });

    return assistantReply;
  } catch (e) {
    return `B≈ÇƒÖd API: ${e.message}`;
  }
}

function cleanMessage(rawMessage) {
  return rawMessage.replace(/\n\{.*\}$/, '').trim();
}

async function processUserInput(text) {
  appendMessage(text, true);
  appendMessage('...', false);

  try {
    const response = await sendToPuter(text);
    chatMessages.lastChild.remove();

    const visibleResponse = cleanMessage(response);
    appendMessage(visibleResponse);

    const akcja = extractJsonFromText(response);
    if (akcja) {
      if (akcja.akcja === 'pokaz_bio') {
        animateFingerClick('biobtn');
      } else if (akcja.akcja === 'podswietl_bio') {
        highlightBioBtn();
      } else if (akcja.akcja === 'pokaz_filmiki') {
        animateFingerClick('filmikibtn');
      } else if (akcja.akcja === 'podswietl_filmiki') {
        highlightFilmikiBtn();  
      } else if (akcja.akcja === 'pokaz_Ai') {
        animateFingerClick('aibtn');
      } else if (akcja.akcja === 'podswietl_Ai') {
        highlightAiBtn();
      }
    }
  } catch (e) {
    chatMessages.lastChild.textContent = 'B≈ÇƒÖd: ' + e.message;
  }
}

// === OBS≈ÅUGA UI ===
chatToggle.onclick = () => {
  chatWindow.style.display = 'flex';
  chatToggle.style.display = 'none';
  chatInput.focus();
};

chatClose.onclick = () => {
  chatWindow.style.display = 'none';
  chatToggle.style.display = 'flex';
};

sendBtn.onclick = () => {
  const text = chatInput.value.trim();
  if (!text) return;
  chatInput.value = '';
  processUserInput(text);
};

chatInput.addEventListener('keydown', e => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    sendBtn.click();
  }
});
